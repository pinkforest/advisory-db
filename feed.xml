<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>RustSec Advisories</title><id>https://rustsec.org/feed.xml</id><updated>2023-01-16T12:00:00+00:00</updated><author><name>RustSec</name></author><icon>https://rustsec.org/favicon.ico</icon><link href="https://rustsec.org/feed.xml" rel="self" type="application/atom+xml"/><link href="https://rustsec.org/" rel="alternate" type="text/html"/><subtitle xml:lang="en">Security advisories filed against Rust crates</subtitle><entry><title>RUSTSEC-2022-0080: parity-util-mem is unmaintained</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0080.html</id><updated>2023-01-16T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2022-0080.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0080: parity-util-mem is unmaintained"/><published>2023-01-16T12:00:00+00:00</published><summary xml:lang="en">parity-util-mem Unmaintained</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/parity-util-mem/RUSTSEC-2022-0080.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/parity-util-mem/RUSTSEC-2022-0080.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2022-0080
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;parity-util-mem Unmaintained&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-11-30&quot;&gt;
          November 30, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2023-01-16&quot;&gt;
          January 16, 2023
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/parity-util-mem.html&quot;&gt;parity-util-mem&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/parity-util-mem&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unmaintained
        
      &lt;/dd&gt;

      

      

      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/paritytech/parity-common/pull/696&quot;&gt;
          https://github.com/paritytech/parity-common/pull/696
        &lt;/a&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        no patched versions
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The crate has been deprecated and will receive no updates with no repository source.&lt;/p&gt;
&lt;p&gt;The crate has &lt;a href=&quot;https://crates.io/crates/parity-util-mem&quot;&gt;a warning&lt;/a&gt; surrounding it&apos;s use related to global allocator use that may lead to UB.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2021-0146: twoway is unmaintained</title><id>https://rustsec.org/advisories/RUSTSEC-2021-0146.html</id><updated>2023-01-15T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2021-0146.html" rel="alternate" type="text/html" title="RUSTSEC-2021-0146: twoway is unmaintained"/><published>2023-01-15T12:00:00+00:00</published><summary xml:lang="en">Crate `twoway` deprecated by the author</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/twoway/RUSTSEC-2021-0146.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/twoway/RUSTSEC-2021-0146.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2021-0146
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Crate &lt;code&gt;twoway&lt;/code&gt; deprecated by the author&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2021-05-20&quot;&gt;
          May 20, 2021
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2023-01-15&quot;&gt;
          January 15, 2023
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/twoway.html&quot;&gt;twoway&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/twoway&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unmaintained
        
      &lt;/dd&gt;

      

      

      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/bluss/twoway&quot;&gt;
          https://github.com/bluss/twoway
        &lt;/a&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        no patched versions
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The commit &lt;a href=&quot;https://github.com/bluss/twoway/commit/e99b3c718df1117ad7f54c33f6540c8f46cc17dd&quot;&gt;&lt;code&gt;e99b3c7&lt;/code&gt;&lt;/a&gt; releasing version 0.2.2 explicitely deprecates &lt;code&gt;twoway&lt;/code&gt; in favour of &lt;a href=&quot;https://crates.io/crates/memchr&quot;&gt;&lt;code&gt;memchr&lt;/code&gt;&lt;/a&gt; crate.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0079: Vulnerability in elf_rs</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0079.html</id><updated>2023-01-18T12:00:00+00:00</updated><category term="memory-corruption"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0079.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0079: Vulnerability in elf_rs"/><published>2023-01-15T12:00:00+00:00</published><summary xml:lang="en">ELF header parsing library doesn&amp;apos;t check for valid offset</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/elf_rs/RUSTSEC-2022-0079.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/elf_rs/RUSTSEC-2022-0079.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2022-0079
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;ELF header parsing library doesn&apos;t check for valid offset&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-10-31&quot;&gt;
          October 31, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2023-01-15&quot;&gt;
          January 15, 2023
        &lt;/time&gt;
        
        &lt;time datetime=&quot;2023-01-18&quot;&gt;
          (last modified: January 18, 2023)
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/elf_rs.html&quot;&gt;elf_rs&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/elf_rs&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/elf.html&quot;&gt;#elf&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/header.html&quot;&gt;#header&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/vincenthouyi/elf_rs/issues/11&quot;&gt;
          https://github.com/vincenthouyi/elf_rs/issues/11
        &lt;/a&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.3.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      

      
      
    &lt;/dl&gt;

    
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The crate has several unsafe sections that don&apos;t perform proper pointer validation.&lt;/p&gt;
&lt;p&gt;An example can be found in the following function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn section_header_raw(&amp;amp;self) -&amp;gt; &amp;amp;[ET::SectionHeader] {
    let sh_off = self.elf_header().section_header_offset() as usize;
    let sh_num = self.elf_header().section_header_entry_num() as usize;
    unsafe {
        let sh_ptr = self.content().as_ptr().add(sh_off);
        from_raw_parts(sh_ptr as *const ET::SectionHeader, sh_num)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While this will work perfectly fine &lt;em&gt;if&lt;/em&gt; the ELF header is valid, malicious or
malformed input can contain a section header offset of an arbitrary size, meaning
that the resultant pointer in the unsafe block can point to an artibrary address
in the address space of the process.&lt;/p&gt;
&lt;p&gt;This can result in unpredictable behaviour, and in our fuzz testing, we discovered
that it&apos;s trivial to cause SIGABRT (signal 6), or SEGV (signal 11).&lt;/p&gt;
&lt;p&gt;The function should either be marked as unsafe, with a note that the caller is responsible
for providing only valid inputs, or it should ideally do the due diligence to ensure that the
offset doesn&apos;t exceed the bounds of the header (and add additional checks as necessary).&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0077: claim is unmaintained</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0077.html</id><updated>2023-01-14T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2022-0077.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0077: claim is unmaintained"/><published>2023-01-14T12:00:00+00:00</published><summary xml:lang="en">`claim` is Unmaintained</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/claim/RUSTSEC-2022-0077.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/claim/RUSTSEC-2022-0077.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2022-0077
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;&lt;code&gt;claim&lt;/code&gt; is Unmaintained&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-12-04&quot;&gt;
          December  4, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2023-01-14&quot;&gt;
          January 14, 2023
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/claim.html&quot;&gt;claim&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/claim&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unmaintained
        
      &lt;/dd&gt;

      

      

      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/svartalf/rust-claim/issues/12&quot;&gt;
          https://github.com/svartalf/rust-claim/issues/12
        &lt;/a&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        no patched versions
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;The last release was in February 2021, almost two years ago.&lt;/p&gt;
&lt;p&gt;The maintainer has been unresponsive regarding this crate for over a year.&lt;/p&gt;
&lt;p&gt;A pending issue with &lt;code&gt;claim&lt;/code&gt;&apos;s dependencies has made the crate &lt;a href=&quot;https://github.com/svartalf/rust-claim/issues/9&quot;&gt;difficul to use&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Possible Alternative(s)&lt;/h2&gt;
&lt;p&gt;The below list has not been vetted in any way and may or may not contain alternatives;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://crates.io/crates/claims&quot;&gt;&lt;code&gt;claims&lt;/code&gt;&lt;/a&gt;, a direct fork of the &lt;code&gt;claim&lt;/code&gt; crate&lt;/li&gt;
&lt;/ul&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0078: Unsoundness in bumpalo</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0078.html</id><updated>2023-01-14T12:00:00+00:00</updated><category term="memory-corruption"/><category term="memory-exposure"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0078.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0078: Unsoundness in bumpalo"/><published>2023-01-14T12:00:00+00:00</published><summary xml:lang="en">Use-after-free due to a lifetime error in `Vec::into_iter()`</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/bumpalo/RUSTSEC-2022-0078.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/bumpalo/RUSTSEC-2022-0078.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2022-0078
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Use-after-free due to a lifetime error in &lt;code&gt;Vec::into_iter()&lt;/code&gt;&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-01-14&quot;&gt;
          January 14, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2023-01-14&quot;&gt;
          January 14, 2023
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/bumpalo.html&quot;&gt;bumpalo&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/bumpalo&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unsound
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-exposure.html&quot;&gt;memory-exposure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/use-after-free.html&quot;&gt;#use-after-free&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/fitzgen/bumpalo/blob/main/CHANGELOG.md#3111&quot;&gt;
          https://github.com/fitzgen/bumpalo/blob/main/CHANGELOG.md#3111
        &lt;/a&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=3.11.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;1.1.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      
    &lt;/dl&gt;

    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;bumpalo::collections::vec::Vec::into_iter&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;3.11.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;In affected versions of this crate, the lifetime of the iterator produced by
&lt;code&gt;Vec::into_iter()&lt;/code&gt; is not constrained to the lifetime of the &lt;code&gt;Bump&lt;/code&gt; that
allocated the vector&apos;s memory. Using the iterator after the &lt;code&gt;Bump&lt;/code&gt; is dropped
causes use-after-free accesses.&lt;/p&gt;
&lt;p&gt;The following example demonstrates memory corruption arising from a misuse of
this unsoundness.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;use bumpalo::{collections::Vec, Bump};

fn main() {
    let bump = Bump::new();
    let mut vec = Vec::new_in(&amp;amp;bump);
    vec.extend([0x01u8; 32]);
    let into_iter = vec.into_iter();
    drop(bump);

    for _ in 0..100 {
        let reuse_bump = Bump::new();
        let _reuse_alloc = reuse_bump.alloc([0x41u8; 10]);
    }

    for x in into_iter {
        print!(&amp;quot;0x{:02x} &amp;quot;, x);
    }
    println!();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The issue was corrected in version 3.11.1 by adding a lifetime to the &lt;code&gt;IntoIter&lt;/code&gt;
type, and updating the signature of &lt;code&gt;Vec::into_iter()&lt;/code&gt; to constrain this
lifetime.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0076: Vulnerability in wasmtime</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0076.html</id><updated>2023-01-12T12:00:00+00:00</updated><category term="memory-corruption"/><category term="memory-exposure"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0076.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0076: Vulnerability in wasmtime"/><published>2023-01-12T12:00:00+00:00</published><summary xml:lang="en">Bug in Wasmtime implementation of pooling instance allocator</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/wasmtime/RUSTSEC-2022-0076.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/wasmtime/RUSTSEC-2022-0076.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2022-0076
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Bug in Wasmtime implementation of pooling instance allocator&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-11-10&quot;&gt;
          November 10, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2023-01-12&quot;&gt;
          January 12, 2023
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/wasmtime.html&quot;&gt;wasmtime&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/wasmtime&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-corruption.html&quot;&gt;memory-corruption&lt;/a&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-exposure.html&quot;&gt;memory-exposure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/memory.html&quot;&gt;#memory&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/allocator.html&quot;&gt;#allocator&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/Wasm.html&quot;&gt;#Wasm&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/bounds.html&quot;&gt;#bounds&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/sandbox.html&quot;&gt;#sandbox&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/paging.html&quot;&gt;#paging&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39392&quot;&gt;CVE-2022-39392&lt;/a&gt;
            
          &lt;/li&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://github.com/advisories/GHSA-44mr-8vmm-wjhg&quot;&gt;GHSA-44mr-8vmm-wjhg&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-44mr-8vmm-wjhg&quot;&gt;
          https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-44mr-8vmm-wjhg
        &lt;/a&gt;
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;cvss_score&quot;&gt;CVSS Score&lt;/dt&gt;
      &lt;dd&gt;7.4 &lt;span class=&quot;tag high&quot;&gt;
        HIGH
      &lt;/span&gt;&lt;/dd&gt;

      &lt;dt id=&quot;cvss_details&quot;&gt;CVSS Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;dl&gt;
          
          &lt;dt&gt;Attack vector&lt;/dt&gt;&lt;dd&gt;Network&lt;/dd&gt;
          

          
          &lt;dt&gt;Attack complexity&lt;/dt&gt;&lt;dd&gt;High&lt;/d&gt;
          

          
          &lt;dt&gt;Privileges required&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          &lt;dt&gt;User interaction&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          

          
          &lt;dt&gt;Scope&lt;/dt&gt;&lt;dd&gt;Unchanged&lt;/dd&gt;
          

          
          &lt;dt&gt;Confidentiality&lt;/dt&gt;&lt;dd&gt;High&lt;/dd&gt;
          

          
          &lt;dt&gt;Integrity&lt;/dt&gt;&lt;dd&gt;High&lt;/dd&gt;
          

          
          &lt;dt&gt;Availability&lt;/dt&gt;&lt;dd&gt;None&lt;/dd&gt;
          
        &lt;/dl&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;cvss&quot;&gt;CVSS Vector&lt;/dt&gt;
      &lt;dd&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N&quot;&gt;CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N&lt;/a&gt;&lt;/dd&gt;

      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=2.0.2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      

      
      
    &lt;/dl&gt;

    
    
    &lt;dl&gt;
      &lt;dt&gt;Affected Functions&lt;/dt&gt;
      &lt;dd&gt;Version&lt;/dd&gt;
      
      &lt;dt&gt;&lt;code&gt;wasmtime::PoolingAllocationConfig::instance_memory_pages&lt;/code&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;2.0.2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
    &lt;/dl&gt;
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;Bug in Wasmtime&apos;s implementation of its pooling instance allocator when the allocator is configured to give WebAssembly instances a maximum of zero pages of memory.&lt;/p&gt;
&lt;p&gt;In this configuration, the virtual memory mapping for WebAssembly memories did not meet the compiler-required configuration requirements for safely executing WebAssembly modules. Wasmtime&apos;s default settings require virtual memory page faults to indicate that wasm reads/writes are out-of-bounds, but the pooling allocator&apos;s configuration would not create an appropriate virtual memory mapping for this meaning out of bounds reads/writes can successfully read/write memory unrelated to the wasm sandbox within range of the base address of the memory mapping created by the pooling allocator.&lt;/p&gt;
&lt;p&gt;This bug is not applicable with the default settings of the &lt;code&gt;wasmtime&lt;/code&gt; crate.&lt;/p&gt;
&lt;p&gt;This bug can only be triggered by setting &lt;code&gt;InstanceLimits::memory_pages&lt;/code&gt; to zero.&lt;/p&gt;
&lt;p&gt;This is expected to be a very rare configuration since this means that wasm modules cannot allocate any pages of linear memory.&lt;/p&gt;
&lt;p&gt;All wasm modules produced by all current toolchains are highly likely to use linear memory, so it&apos;s expected to be unlikely that this configuration is set to zero by any production embedding of Wasmtime.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0075: Vulnerability in wasmtime</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0075.html</id><updated>2023-01-14T12:00:00+00:00</updated><category term="memory-exposure"/><link href="https://rustsec.org/advisories/RUSTSEC-2022-0075.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0075: Vulnerability in wasmtime"/><published>2023-01-12T12:00:00+00:00</published><summary xml:lang="en">Bug in pooling instance allocator</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/wasmtime/RUSTSEC-2022-0075.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/wasmtime/RUSTSEC-2022-0075.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2022-0075
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Bug in pooling instance allocator&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-11-10&quot;&gt;
          November 10, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2023-01-12&quot;&gt;
          January 12, 2023
        &lt;/time&gt;
        
        &lt;time datetime=&quot;2023-01-14&quot;&gt;
          (last modified: January 14, 2023)
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/wasmtime.html&quot;&gt;wasmtime&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/wasmtime&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/memory-exposure.html&quot;&gt;memory-exposure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/use-after-free.html&quot;&gt;#use-after-free&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/Wasm.html&quot;&gt;#Wasm&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/garbage-collection.html&quot;&gt;#garbage-collection&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-39393&quot;&gt;CVE-2022-39393&lt;/a&gt;
            
          &lt;/li&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://github.com/advisories/GHSA-wh6w-3828-g9qf&quot;&gt;GHSA-wh6w-3828-g9qf&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf&quot;&gt;
          https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf
        &lt;/a&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.0.2, &amp;lt;2.0.0&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=2.0.2&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;bug in Wasmtime&apos;s implementation of its pooling instance allocator where when a linear memory is reused for another instance the initial heap snapshot of the prior instance can be visible, erroneously to the next instance.&lt;/p&gt;
&lt;p&gt;Mitigations are described &lt;a href=&quot;https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2023-0002: Vulnerability in git2</title><id>https://rustsec.org/advisories/RUSTSEC-2023-0002.html</id><updated>2023-01-12T12:00:00+00:00</updated><category term="crypto-failure"/><link href="https://rustsec.org/advisories/RUSTSEC-2023-0002.html" rel="alternate" type="text/html" title="RUSTSEC-2023-0002: Vulnerability in git2"/><published>2023-01-12T12:00:00+00:00</published><summary xml:lang="en">git2 Rust package suppresses ssh host key checking</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/git2/RUSTSEC-2023-0002.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/git2/RUSTSEC-2023-0002.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        &lt;span class=&quot;withdrawn&quot;&gt;RUSTSEC-2023-0002&lt;/span&gt;
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;git2 Rust package suppresses ssh host key checking&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    
    &lt;hr&gt;
    &lt;p class=&quot;warning&quot;&gt;This advisory has been withdrawn and should be ignored. It is kept only for reference.&lt;/p&gt;
    &lt;hr&gt;
    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2023-01-12&quot;&gt;
          January 12, 2023
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2023-01-12&quot;&gt;
          January 12, 2023
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/git2.html&quot;&gt;git2&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/git2&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;categories&quot;&gt;Categories&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;a href=&quot;/categories/crypto-failure.html&quot;&gt;crypto-failure&lt;/a&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/cargo.html&quot;&gt;#cargo&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/ssh.html&quot;&gt;#ssh&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/mitm.html&quot;&gt;#mitm&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/rust-lang/git2-rs/pull/909&quot;&gt;
          https://github.com/rust-lang/git2-rs/pull/909
        &lt;/a&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.16.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;By default, when accessing an ssh repository
(ie via an &lt;code&gt;ssh:&lt;/code&gt; git repository url)
the git2 Rust package does not do any host key checking.&lt;/p&gt;
&lt;p&gt;Additionally,
the provided API is not sufficient for a an application
to do meaningful checking itself.&lt;/p&gt;
&lt;h2&gt;Impact&lt;/h2&gt;
&lt;p&gt;When connecting to an ssh repository,
and when an attacker can redirect the connection
(performing a malice-in-the-middle attack)
an affected application might:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Receive git objects and branches controlled by the attacker,
exposing the local system (and whatever happens next)
to malicious data.
In many circumstances,
this could readily lead to privilege escalation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Erroneously send git objects to the attacker,
rather than to the intended recipient.
If the information is not supposed to be public,
this would constitute an information leak.
Also, since the data doesn&apos;t arrive where intended,
it consitutes a denial of service.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Technical details&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;git2&lt;/code&gt; Rust package (henceforth, git2-rs)
unconditionally calls the underlying C &lt;code&gt;libgit2&lt;/code&gt; functions to set
an ssh certificate check callback.
The Rust package uses this to offer
the ability for the application to set a callback to a Rust function.&lt;/p&gt;
&lt;p&gt;The C-level callback function provided by git2-rs 0.15.0 and earlier:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Always ignores the &lt;code&gt;is_valid&lt;/code&gt; argument provided by &lt;code&gt;libgit2&lt;/code&gt;,
which indicates whether &lt;code&gt;libgit2&lt;/code&gt; considers the host key valid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default, performs no checks, and then
returns code &lt;code&gt;0&lt;/code&gt;,
indicating to &lt;code&gt;libgit2&lt;/code&gt; to override &lt;code&gt;libgit2&lt;/code&gt;&apos;s determination
and treat the host key as valid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provides only limited APIs to the application
for examining the supplied host key,
and doesn&apos;t tell the application
whether &lt;code&gt;libgit2&lt;/code&gt;&apos;s checks succeeded,
so it is difficult for the application cannot work around the problem.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Resolution&lt;/h2&gt;
&lt;p&gt;Upgrade to git2-rs 0.16.x.&lt;/p&gt;
&lt;p&gt;The default behaviour in 0.16.x is to
honour &lt;code&gt;libgit2&lt;/code&gt;&apos;s validity determination.&lt;/p&gt;
&lt;p&gt;Note that adding this previously skipped check
may cause existing setups to stop working.&lt;/p&gt;
&lt;h2&gt;Relationship to CVE-2022-46176&lt;/h2&gt;
&lt;p&gt;This bug manifested in cargo where it was assigned CVE-2022-46176.&lt;/p&gt;
&lt;p&gt;The same bug exists in other applications which use
affected versions of git2-rs
unless they never try to access git repositories with &lt;code&gt;ssh:&lt;/code&gt; urls.&lt;/p&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2023-0001: Vulnerability in tokio</title><id>https://rustsec.org/advisories/RUSTSEC-2023-0001.html</id><updated>2023-01-09T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2023-0001.html" rel="alternate" type="text/html" title="RUSTSEC-2023-0001: Vulnerability in tokio"/><published>2023-01-09T12:00:00+00:00</published><summary xml:lang="en">reject_remote_clients Configuration corruption</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/tokio/RUSTSEC-2023-0001.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/tokio/RUSTSEC-2023-0001.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2023-0001
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;reject_remote_clients Configuration corruption&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2023-01-04&quot;&gt;
          January  4, 2023
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2023-01-09&quot;&gt;
          January  9, 2023
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/tokio.html&quot;&gt;tokio&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/tokio&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        Vulnerability
        
      &lt;/dd&gt;

      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/configuration-failure.html&quot;&gt;#configuration-failure&lt;/a&gt;
        
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;aliases&quot;&gt;Aliases&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-22466&quot;&gt;CVE-2023-22466&lt;/a&gt;
            
          &lt;/li&gt;
          
          &lt;li&gt;
            
            &lt;a href=&quot;https://github.com/advisories/GHSA-7rrj-xr53-82p7&quot;&gt;GHSA-7rrj-xr53-82p7&lt;/a&gt;
            
          &lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7&quot;&gt;
          https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7
        &lt;/a&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.18.4, &amp;lt;1.19.0&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.20.3, &amp;lt;1.21.0&lt;/code&gt;&lt;/li&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=1.23.1&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      
      &lt;dt id=&quot;unaffected&quot;&gt;Unaffected&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;lt;1.7.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      

      
      

      
      &lt;dt&gt;Affected OSes&lt;/dt&gt;
      &lt;dd&gt;
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;windows&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
      &lt;/dd&gt;
      
      
    &lt;/dl&gt;

    
    

    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;On Windows, configuring a named pipe server with &lt;a href=&quot;https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html#method.pipe_mode&quot;&gt;pipe_mode&lt;/a&gt; will force &lt;a href=&quot;https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html&quot;&gt;ServerOptions&lt;/a&gt;::&lt;a href=&quot;https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html#method.reject_remote_clients&quot;&gt;reject_remote_clients&lt;/a&gt; as &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This drops any intended explicit configuration for the &lt;a href=&quot;https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html#method.reject_remote_clients&quot;&gt;reject_remote_clients&lt;/a&gt; that may have been set as &lt;code&gt;true&lt;/code&gt; previously.&lt;/p&gt;
&lt;p&gt;The default setting of &lt;a href=&quot;https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html#method.reject_remote_clients&quot;&gt;reject_remote_clients&lt;/a&gt; is normally &lt;code&gt;true&lt;/code&gt; meaning the default is also overriden as &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Workarounds&lt;/h2&gt;
&lt;p&gt;Ensure that &lt;a href=&quot;https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html#method.pipe_mode&quot;&gt;pipe_mode&lt;/a&gt; is set first after initializing a &lt;a href=&quot;https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html&quot;&gt;ServerOptions&lt;/a&gt;. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot;&gt;let mut opts = ServerOptions::new();
opts.pipe_mode(PipeMode::Message);
opts.reject_remote_clients(true);
&lt;/code&gt;&lt;/pre&gt;

  &lt;/article&gt;</content></entry><entry><title>RUSTSEC-2022-0074: Unsoundness in prettytable-rs</title><id>https://rustsec.org/advisories/RUSTSEC-2022-0074.html</id><updated>2022-12-27T12:00:00+00:00</updated><link href="https://rustsec.org/advisories/RUSTSEC-2022-0074.html" rel="alternate" type="text/html" title="RUSTSEC-2022-0074: Unsoundness in prettytable-rs"/><published>2022-12-27T12:00:00+00:00</published><summary xml:lang="en">Force cast a &amp;amp;Vec&amp;lt;T&amp;gt; to &amp;amp;[T]</summary><content xml:lang="en" type="html">  &lt;article&gt;
    
        &lt;span class=&quot;floating-menu&quot;&gt;
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/commits/main/crates/prettytable-rs/RUSTSEC-2022-0074.md&quot;&gt;History&lt;/a&gt; ⋅ 
          &lt;a href=&quot;https://github.com/RustSec/advisory-db/edit/main/crates/prettytable-rs/RUSTSEC-2022-0074.md&quot;&gt;Edit&lt;/a&gt;
        &lt;/span&gt;
    

    &lt;header&gt;
      &lt;h1&gt;
        
        RUSTSEC-2022-0074
        
      &lt;/h1&gt;
      &lt;span class=&quot;subtitle&quot;&gt;&lt;p&gt;Force cast a &amp;amp;Vec&lt;!-- raw HTML omitted --&gt; to &amp;amp;[T]&lt;/p&gt;
&lt;/span&gt;
    &lt;/header&gt;

    

    &lt;dl&gt;
      &lt;dt id=&quot;reported&quot;&gt;Reported&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-12-02&quot;&gt;
          December  2, 2022
        &lt;/time&gt;
      &lt;/dd&gt;

      &lt;dt id=&quot;issued&quot;&gt;Issued&lt;/dt&gt;
      &lt;dd&gt;
        &lt;time datetime=&quot;2022-12-27&quot;&gt;
          December 27, 2022
        &lt;/time&gt;
        
      &lt;/dd&gt;

      &lt;dt id=&quot;package&quot;&gt;Package&lt;/dt&gt;
      &lt;dd&gt;
        
        
        &lt;a href=&quot;/packages/prettytable-rs.html&quot;&gt;prettytable-rs&lt;/a&gt;
          (&lt;a href=&quot;https://crates.io/crates/prettytable-rs&quot;&gt;crates.io&lt;/a&gt;)
        
        
      &lt;/dd&gt;

      &lt;dt id=&quot;type&quot;&gt;Type&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;span class=&quot;tag info&quot;&gt;INFO&lt;/span&gt;
        Unsound
        
      &lt;/dd&gt;

      

      
      &lt;dt id=&quot;keywords&quot;&gt;Keywords&lt;/dt&gt;
      &lt;dd&gt;
        
          &lt;a href=&quot;/keywords/tab.html&quot;&gt;#tab&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/table.html&quot;&gt;#table&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/format.html&quot;&gt;#format&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/pretty.html&quot;&gt;#pretty&lt;/a&gt;
        
          &lt;a href=&quot;/keywords/print.html&quot;&gt;#print&lt;/a&gt;
        
      &lt;/dd&gt;
      

      

      
      &lt;dt id=&quot;details&quot;&gt;Details&lt;/dt&gt;
      &lt;dd&gt;
        &lt;a href=&quot;https://github.com/phsym/prettytable-rs/issues/145&quot;&gt;
          https://github.com/phsym/prettytable-rs/issues/145
        &lt;/a&gt;
      &lt;/dd&gt;
      

      

      
      

      &lt;dt id=&quot;patched&quot;&gt;Patched&lt;/dt&gt;
      &lt;dd&gt;
        
        &lt;ul&gt;
          
          &lt;li&gt;&lt;code&gt;&amp;gt;=0.10.0&lt;/code&gt;&lt;/li&gt;
          
        &lt;/ul&gt;
        
      &lt;/dd&gt;

      

      
      
    &lt;/dl&gt;

    
    

    &lt;h3 id=&quot;description&quot;&gt;Description&lt;/h3&gt;
    &lt;p&gt;In function &lt;code&gt;Table::as_ref&lt;/code&gt;, a reference of vector is force cast to slice. There are multiple problems here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To guarantee the size is correct, we have to first do &lt;code&gt;Vec::shrink_to_fit&lt;/code&gt;. The function requires a mutable reference, so we have to force cast from immutable to mutable, which is UB.&lt;/li&gt;
&lt;li&gt;Even if (1) is sound, &lt;code&gt;&amp;amp;Vec&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;amp;[T]&lt;/code&gt; still might not have the same layout. Treating them equally may lead to UB.&lt;/li&gt;
&lt;/ol&gt;

  &lt;/article&gt;</content></entry></feed>